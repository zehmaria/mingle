plugins {
    id('java')
    id('eclipse')
    id('idea')
    id('net.neoforged.gradle.userdev') version('7.0.151')//https://projects.neoforged.net/neoforged/neogradle
}

tasks.named('wrapper', Wrapper).configure {
    //Define wrapper values here so as to not have to always do so when updating gradlew.properties
    gradleVersion = '8.8'
    distributionType = Wrapper.DistributionType.ALL
}

idea {
    module {
        //Exclude directories from being managed
        for (String excludeDirName in ["runs", "out", "logs", "gradle"]) {
            //excludeDirs.add(new File(projectDir, excludeDirName))
            excludeDirs.add(file(excludeDirName))
        }
        //Tell IDEA to always download sources/javadoc artifacts from maven.
        downloadJavadoc = true
        downloadSources = true
    }
}

version = minecraft_version + '-' + mod_version
group = mod_author + '.' + mod_id // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = mod_id + "-neoforge"

java.toolchain.languageVersion = JavaLanguageVersion.of(java_version)

minecraft.accessTransformers.file file('src/main/resources/META-INF/accesstransformer.cfg')

sourceSets.main.resources {
    srcDirs += 'src/generated/resources'
    exclude '.cache'
}

def version_replaces = [
        "version"    : mod_version,
        "mc_version": minecraft_version_range,
        "neoforge_version": neoforge_version_range,
        "loader_version": loader_version_range
]
processResources {
    duplicatesStrategy = DuplicatesStrategy.FAIL
    inputs.properties(version_replaces)
    filesMatching("META-INF/neoforge.mods.toml") {
        expand version_replaces
    }
    exclude ".cache"
}

runs {
    configureEach {
        workingDirectory project.file("run/${it.name}")
        //systemProperty 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
        //systemProperty 'forge.logging.console.level', 'debug'
        modSource project.sourceSets.main
    }

    client

    server {
        programArgument '--nogui'
    }

    data {
        programArguments.addAll '--mod', "mingle", '--all', '--output', file('src/generated/resources/').getAbsolutePath(),
                '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

repositories {

}


dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_author,
                "Specification-Version"   : mod_version,
                "Implementation-Title"    : project.jar.archiveBaseName,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

compileJava {
    options.compilerArgs = ['-Xdiags:verbose']
}
